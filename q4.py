# -*- coding: utf-8 -*-
"""Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18nf4iATETwjspTxkyFpZJPTtAEX5D3ye
"""

import numpy as np
from numpy import linalg as LA

#Q1
np.random.seed(1053)
mu_1, sigma_1 = 3, 3 # mean and standard deviation
mu_2, sigma_2 = 4, 2
x_1 = np.random.normal(mu_1, sigma_1, 100)
x_n = np.random.normal(mu_2, sigma_2, 100) 
x_2 = 1/2 * (x_1) + x_n

mean =(np.mean(x_1), np.mean(x_2))
print(mean)

#Q2
cov_mat = np.cov([x_1, x_2])
print("Covariance Matrix: ", cov_mat)

#Q3
eigenValue, eigenVector = LA.eig(cov_mat)
print("Eigenvalue: ",eigenValue)
print("Eigenvectors: ", eigenVector)

#Q4
#On a two-dimensional grid with a horizonal axis for X1 with range [−15, 15] and a vertical
#axis for X2 with range [−15, 15], plot
#(i) all n = 100 data points, and
#(ii) arrows representing both covariance eigenvectors. The eigenvector arrows should originate
#at the mean and have magnitudes equal to their corresponding eigenvalues.
#Hint: make sure your plotting software is set so the figure is square (i.e., the horizontal and
#vertical scales are the same). Not doing that may lead to hours of frustration!
import matplotlib.pyplot as plt
plt.xlim(-15, 15)
plt.ylim(-15, 15)
plt.xlabel("x1")
plt.ylabel("x2")
plt.title("Scatter plot of 100 sample points with eigenvectors")
plt.scatter(x_1, x_2)
plt.quiver(np.mean(x_1), np.mean(x_2),eigenVector[0][0], eigenVector[0][1], scale=1/eigenValue[0], scale_units = 'xy')
plt.quiver(np.mean(x_1), np.mean(x_2),eigenVector[1][0], eigenVector[1][1], scale=1/eigenValue[1], scale_units = 'xy')

plt.show()

#Q5
v_1 = eigenVector[:, 0]
v_2 = eigenVector[:, 1]
print(eigenVector[0])
print(eigenVector[1])
v_1 = (v_1/LA.norm(v_1)).tolist()
v_2 = (v_2/LA.norm(v_2)).tolist()

U = np.array([v_1, v_2])
U
U_t = U.transpose()
print(U_t)
x_1_centered = x_1 - np.mean(x_1)
x_2_centered = x_2 - np.mean(x_2)
centered_matrix = np.array([x_1_centered, x_2_centered])
x_rotated = np.matmul(U_t, centered_matrix)

plt.xlim(-15, 15)
plt.ylim(-15, 15)
plt.xlabel("x1 rotated")
plt.ylabel("x2 rotated")
plt.title("Scatter plot of 100 sample points after rotation")
plt.scatter(x_rotated[0], x_rotated[1])

